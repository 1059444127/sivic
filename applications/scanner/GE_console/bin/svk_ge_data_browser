#!/usr/bin/wish -f

#
#   Copyright © 2009-2014 The Regents of the University of California.
#   All Rights Reserved.
# 
#   Redistribution and use in source and binary forms, with or without 
#   modification, are permitted provided that the following conditions are met:
#   •   Redistributions of source code must retain the above copyright notice, 
#       this list of conditions and the following disclaimer.
#   •   Redistributions in binary form must reproduce the above copyright notice, 
#       this list of conditions and the following disclaimer in the documentation 
#       and/or other materials provided with the distribution.
#   •   None of the names of any campus of the University of California, the name 
#       "The Regents of the University of California," or the names of any of its 
#       contributors may be used to endorse or promote products derived from this 
#       software without specific prior written permission.
#   
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
#   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#   IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
#   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
#   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
#   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
#   OF SUCH DAMAGE.
# 

#   $URL: svn+ssh://jccrane@svn.code.sf.net/p/sivic/code/trunk/libs/src/svkImageData.cc $
#   $Rev: 1741 $
#   $Author: jccrane $
#   $Date: 2014-02-19 11:28:48 -0800 (Wed, 19 Feb 2014) $
# 
#   Authors:
#       Jason C. Crane, Ph.D.
#       Beck Olson
# 

# this program takes a .cfg file as an argument
# displays a tcl/tk widget for choosing raw files and/or 
# dcm images from the scanner console browser.

# the whole file must be read before we get to the 
# first executable statement, which is a call to 
# show_next

# but first we have to load a bunch of stuff and intitiate
# the server

# take the config file as an argument...
if {$argc != 2} {
  puts "Usage: svk_ge_data_browser_template config_file"
  exit 1  
}

set cfg_filename [lindex $argv 0]
global scanner_work_dir
set scanner_work_dir [lindex $argv 1]
set program ""
set title ""
set output ""
set command ""
set show_output 1
set scp_program "svk_ge_data_scp"
set outputfilename "~sdc/svk/console/data/svk_ge_data_output.txt"
set output_file_ptr ""
# this is where we will look for the raw files

# TESTING
set raw_file_location "/usr/g/mrraw"
# END

# this is the variable where each selection is stored until assigned
set file_selection "null"

# initialize the server
set server localhost
set sockChan [socket $server 9900]

# this is where we store the list of files
set files_chosen {}
set display_files {}

# one for each entry in the cfg file
set files_to_choose {}
set directions {}

# the index to where we are in file_types
set index 0

# these are the variables needed for the flag chooser
set opt_checked 0
set opt 0
set file_ctr 0
set option_list {}
set chosen_options {}
global chosen_options program option_list


set bg_color {#BAC1DB}
set label_color {#6875A2}
wm title . "SIVIC Research Data Processing: $title"
wm geometry . +425+0
wm resizable . 0 0
. configure -background $bg_color

# this is a hack - if the user tries to iconify
# we just de-iconify it again.  Can't find any 
# way to explicitly prevent iconifying because the
# function is delegated to the window manager.
# bind . <Unmap> { wm deiconify . }
wm protocol . WM_ICONIFY_WINDOW { puts "Prohibited" }
wm protocol . WM_DELETE_WINDOW { exit_gracefully }

font create titlefont -family Times -size 16 -weight bold

label .directionslabel -background $label_color -font titlefont 

frame .dataframe -relief raised -background $bg_color
frame .buttonframe -background $bg_color
frame .summaryframe -background $label_color -height 20 
frame .chooserframe  -background $label_color
frame .optionframe -background $bg_color
frame .commandframe -background $bg_color
frame .rawheaderframe -background $label_color
frame .imageheaderframe -background $label_color

label .examlabel -bg $label_color -text [format "%-10s " "Exam"]
label .pfilelabel -bg $label_color -text [format "  %-24s " "P file"]
label .namelabel -bg $label_color -text [format "  %-44s " "Name"]
label .mrnlabel -bg $label_color -text [format "  %-26s " "MRN"]
label .datelabel -bg $label_color -text [format "  %-22s " "Date"]
label .timelabel -bg $label_color -text [format "  %-10s " "Time"]
label .examlabel_im -bg $label_color -text [format "%-10s " "Exam"]
label .namelabel_im -bg $label_color -text [format "  %-44s " "Name"]
label .datelabel_im -bg $label_color -text [format "  %-22s " "Date"]
label .seriesnumlabel_im -bg $label_color -text [format "  %-7s " "Series"]
label .seriesdesclabel_im -bg $label_color -text [format "  %-44s " "Description"]


label .summarylabel -bg $label_color -text "Files to Choose" -font titlefont
label .bufferlabel -text " " -background $bg_color

checkbutton .advancedcheck -text "Show advanced flag chooser" -variable advanced -command show_advanced -anchor w -bg $bg_color

label .commandlabel -background $bg_color -anchor w -width 125


listbox .rawchooserlist -yscrollcommand ".chooserscrolly set" -width 105 -height 10  -font {courier 12}
#.rawchooserlist -selectmode extended 

text .infotext -yscrollcommand ".chooserscrolly set" -width 125 -height 14

#scrollbar .summaryscrolly -command ".summarylistframe yview" -background $bg_color 
scrollbar .chooserscrolly -background $bg_color 

button .okbutton -text "Ok" -command show_next -background $bg_color
button .cancelbutton -text "Cancel" -command exit_gracefully -background $bg_color
button .showoutputbutton -text "Hide Output" -command hide_output -background $bg_color
button .tryagainbutton -text "No, try again" -command show_image_chooser -background $bg_color

pack .directionslabel -fill x

pack .dataframe -side top
pack .summaryframe -side left -expand 1 -fill y -in .dataframe
pack .chooserframe -side left -expand 1 -in .dataframe
pack .summarylabel -in .summaryframe -fill x
pack .chooserscrolly -side right -fill y -in .chooserframe
pack .commandlabel .advancedcheck -in .commandframe -fill x -pady 5

pack .examlabel .pfilelabel .namelabel .mrnlabel .datelabel .timelabel -in .rawheaderframe -side left 
pack .examlabel_im .namelabel_im .datelabel_im .seriesnumlabel_im .seriesdesclabel_im -in .imageheaderframe -side left 

# but we don't pack a chooser or text area for the chooserframe now - 
# we'll do it later when we know which is appropriate, in show_next

pack .buttonframe 
pack .okbutton .cancelbutton .tryagainbutton .showoutputbutton -side left -expand 1 -in .buttonframe

.tryagainbutton configure -state disabled
.showoutputbutton configure -state disabled

set cfg_file [open "$cfg_filename" r]

# now parse the config file
while {[gets $cfg_file line] >= 0 } {
    # if the line is not a comment or blank, continue
    if { [regexp "#" $line] } {
        continue
    } elseif { [regexp {^[ \t]*$} $line] } {
        continue
    } elseif { [regexp "(program|title) *=" $line] } {
        regexp "program *=(.*)" $line trash program
        regexp "title *=(.*)" $line trash title
    } elseif { [regexp {^flag} $line]} {
        set trash ""
        set kind ""
        set flagname ""
        set dflag ""
        set choices ""
        set dchoice ""
        set description ""
        regexp {flag[\t ]*(choose|text|none)[\t ]*\|[\t ]*([^\|]+)[\t ]*\|[\t ]*([01 ])[\t ]*\|[\t ]*([^\|]+)[\t ]*\|[\t ]*([^\|]+)[\t ]*\|[\t ]*([^\|]+)} $line trash kind flagname dflag choices dchoice description
        set choices [concat $choices]
        lappend option_list $flagname
        global "check_opt$opt"
        set "check_opt$opt" ""
        global "choice_opt$opt"
        set "choice_opt$opt" ""
        frame .opt${opt}frame -background $bg_color
        label .opt${opt}description -text $description -width 30 -anchor w -background $bg_color
        checkbutton .opt${opt}check -text $flagname -width 7 -anchor w -variable "check_opt$opt" -command update_command -background $bg_color
        if {$dflag == 1} {
            set check_opt$opt 1
        }
        if { $kind == "choose" } {
            menubutton .opt${opt}frame.obj -width 15 -anchor w -textvariable "choice_opt$opt" -bd 1 -relief groove -background $bg_color
            menu .opt${opt}frame.obj.menu -background $bg_color
            .opt${opt}frame.obj configure -menu .opt${opt}frame.obj.menu
            foreach option $choices {
                .opt${opt}frame.obj.menu add radiobutton -label $option -variable "choice_opt${opt}" -value $option -command update_command
                regsub {[\t ]+$} $dchoice "" dchoice
                if { $option == $dchoice } {
                    set "choice_opt${opt}" $option
                }
            }
        } elseif {$kind == "text"} {
            entry .opt${opt}frame.obj  -width 16 -textvariable "choice_opt$opt" -bd 1 
            bind .opt${opt}frame.obj <KeyRelease> {update_command}
            if {$dchoice != ""} {
                set "choice_opt$opt" $dchoice
            }
        } elseif {$kind == "none"} {
            label .opt${opt}frame.obj -width 16 -background $bg_color -text "(None)"
        }
        pack .opt${opt}check -in .opt${opt}frame -side left 
        pack .opt${opt}frame.obj -in .opt${opt}frame -side left
        pack .opt${opt}description -in .opt${opt}frame -side left
        pack .opt${opt}frame -in .optionframe -fill x
        set opt [expr $opt + 1]

    } else {
        set pipe_char [string first {|} $line]
        set pipe_char [expr $pipe_char - 1]
        set start_pos 0
        set end_pos $pipe_char
        set type [string trim [string range $line 0 [expr $pipe_char - 1]]]
        set descr [string trim [string range $line [expr $pipe_char + 2] {end}]]

        # append the directions and file type to the respective lists
        lappend files_to_choose $type
        lappend directions $descr
        label .file${file_ctr}label -width 30 -anchor w
        pack .file${file_ctr}label -in .summaryframe
        set file_ctr [expr $file_ctr + 1]
    }
}

close $cfg_file


##################################################
#   at the beginning and when the ok button is clicked after each file is 
#   chosen, do this

#   if the last one was raw, parse the selection appropriately
#   if the last one was img, series, exam, parse filename
#   store the selection
#   increment the index that points to the next file to choose
#   update directions label
#   show the next window
##################################################
proc show_next {} {
  
    global index files_to_choose directions file_selection files_chosen display_files raw_file_location label_color

    if {[expr $index - 1] >= 0 } {
        set trash ""
        set examname ""
        set seriesname ""
        set imagename ""
        set pfilename ""
        set display_filename ""

        # configure .rawchooserlist selection depending on whether
        # single or multiple entries are permitted: 
        if {[lindex $files_to_choose $index] == "file raw_m"} {
            .rawchooserlist configure -selectmode extended
            set files_to_choose [lreplace $files_to_choose $index $index "file raw"]
        } elseif {[lindex $files_to_choose $index] == "file raw"} {
            .rawchooserlist configure -selectmode browse
        }

        # if prev_type was raw, verify that the user made a selection: 
        set prev_type [lindex $files_to_choose [expr $index - 1]]
        if {$prev_type == "file raw"} {

 	        catch {set file_selection [selection get]} err

            set file_selection_list [ split $file_selection \n]
 	        set pfilename ""	
      	    set file_selection_array "" 

    	    if {$file_selection_list != ""} {
                foreach i $file_selection_list {
    		    regexp {(P[0-9]+\.[0-9_]+)} $i trash pfile
             	    lappend pfilename "$pfile"
             	    lappend file_selection_array $raw_file_location/$pfile
      	        }
    	    }
            set pfilename [join $pfilename "\n            "]
        }

        # if there was no selection but the user clicked ok, return
        if {$file_selection == "null"} {
            # if there is no selection
            puts "there was no selection!"
            return {}
        }

        #  if an image selection:
        regexp {(e[0-9]+)/(s[0-9]+)/(i[0-9]+\.MRDC.[0-9]+)} $file_selection trash examname seriesname imagename
        #regexp {(E[0-9]+)/([0-9]+)/(E[0-9]+S[0-9]+I[0-9]+\.DCM)} $file_selection trash examname seriesname imagename

        # depending on the type of thing we just chose, store it
        # and get rid of the infotext or raw chooser
        if {$prev_type == "file series"} {
            set display_filename "$examname/$seriesname"
            set file_selection [head $file_selection]
            pack forget .infotext
            pack forget .imageheaderframe
        } elseif {$prev_type == "file exam"} {
            set display_filename "$examname"
            set file_selection [head [head $file_selection]]
            pack forget .infotext
        } elseif {$prev_type == "file image"} {
            set display_filename "$examname/$seriesname/$imagename"
            pack forget .infotext
        } elseif {$prev_type == "file raw"} {
            set display_filename "$pfilename"
            set file_selection "$file_selection_array"
            # clear the raw chooser list
            .rawchooserlist delete 0 end
            # we need to remove the listbox now
            pack forget .rawheaderframe
            pack forget .rawchooserlist
        }
        # now append the chosen file to the chosen file list
        lappend files_chosen $file_selection
        lappend display_files $display_filename
    }

    set num_files [expr [llength $files_to_choose]]

    # show the right chooser the first time 
    if {[lindex $files_to_choose $index] == "file raw_m"} {
        .rawchooserlist configure -selectmode extended
        set files_to_choose [lreplace $files_to_choose $index $index "file raw"]
        show_raw_chooser
    } elseif {[lindex $files_to_choose $index] == "file raw"} {
        show_raw_chooser
    } else {
        show_image_chooser 
    }


    # and update the directions label
    .directionslabel configure -text [lindex $directions $index]

    set ctr 0

    # set the summary list 
    foreach i $files_to_choose {
        if {$ctr == $index} {
            .file${ctr}label configure -text "$i" -fg {#FF0000} -bg {#FFFFFF}
        } elseif {$ctr < $index} {
            set tmp [lindex $display_files $ctr]
            .file${ctr}label configure -text "$i $tmp" -fg {#000000} -bg $label_color
        } else {
            .file${ctr}label configure -text "$i" -fg {#000000} -bg $label_color
        }
        set ctr [expr $ctr + 1]
    }

    # now disable the summary list to prevent selections
    #.summarylist configure -state disabled -disabledforeground #6875A2

    # if this is the last image to choose, show_flag_chooser
    if {$index == $num_files} {
        show_confirmation
        return
    }
  
    # unset the file_selection for next time.
    set file_selection "null"
  
    # finally, increment the index
    set index [expr $index + 1]
}


#################################################
proc show_confirmation {} {
    global title 
    .summarylabel configure -text "Files Chosen"
    .directionslabel configure -text "Run $title?"
    pack forget .imageheaderframe
    pack forget .infotext .optionframe
    pack .commandframe -in .chooserframe -fill x
    .okbutton configure -text "Run" -command runcommand
    .showoutputbutton configure -state normal
    .showoutputbutton configure -command show_output
    .advancedcheck configure -text "Show advanced flag chooser"
    update_command
}


##################################################
proc show_advanced {} {
    global advanced
    if {$advanced == 1} {
        show_flag_chooser
    } else {
        show_confirmation
    }
}


##################################################
proc show_flag_chooser {} {

    global program files_chosen command 
    pack forget .commandframe
    pack forget .imageheaderframe
    pack .optionframe -side top -in .chooserframe -fill x 
    pack .commandframe -in .chooserframe -fill x

    update_command

    .advancedcheck configure -text "Hide advanced flag chooser"

    # files_chosen contains the files in a list!
    set argstring [join $files_chosen " "]
}


##################################################
#   procedure to update the command line in the flag
#   chooser after changes in the flags or arguments.
##################################################
proc update_command {} {
    global chosen_options program option_list command_string flag_string
    set command_string "> $program "
    set flag_string ""
    for {set i 0} {$i<[llength $option_list]} {incr i 1} {
        global "check_opt${i}" "choice_opt${i}"
        set check_var_name "check_opt${i}"
        set check_var_val [expr $$check_var_name]
        if {$check_var_val == 1} {
            set check_var_val [lindex $option_list $i]
        } else {
            set check_var_val ""
            continue
        }
        set choice_var_name "choice_opt${i}"
        set choice_var_val [expr $$choice_var_name]
        if {$choice_var_val == ""} {
            append flag_string "$check_var_val "
        } else {
            append flag_string "$check_var_val $choice_var_val "
        }
    }  
    append command_string "$flag_string "
    .commandlabel configure -text $command_string
}


##################################################
proc show_output {} {
    global show_output output

    set show_output 1 

    .infotext delete 1.0 end 
    .infotext insert end $output
    .infotext yview end
    .showoutputbutton configure -text "Hide Output" -command hide_output
}


##################################################
proc hide_output {} {
    global show_output

    set show_output 0
    .infotext delete 1.0 end
    .infotext insert end "Click Show Output to see command output\n"
    .showoutputbutton configure -text "Show Output" -command show_output
}


##################################################
proc show_raw_chooser {} {
    global raw_file_location

    pack .rawheaderframe -in .chooserframe -anchor w -side top
    pack .rawchooserlist -in .chooserframe
    # initialize the scrollbars
    .chooserscrolly configure -command ".rawchooserlist yview" 

    set pfiles "null"
    catch { set pfiles [glob "$raw_file_location/P*.7"] } err

    if {$pfiles == "null"}  {
        puts $err
        destroy .tryagainbutton
        destroy .okbutton
	tk_messageBox -message "NO P-FILES FOUND\nPlease Cancel and acquire a raw file!" -type ok
	return
    }

    foreach i [lsort $pfiles] {
        set output [open "|$::env(HOME)/svk/local/bin/svk_gepfile_reader --print_short_header -i $i" r]
        set dump_output ""
        set pname ""
        set mrn ""
        set date ""
        set time ""
        set exam_number ""
        set se_desc ""
	
        while {[gets $output line] >= 0} {
            #puts "line: $line"
            set dump_output "${dump_output}NXT${line}"
        }
        close $output

        regexp {rhe\.patname               = (.*?)NXT} $dump_output trash pname
        regexp {rhe\.patid                 = (.*?)NXT} $dump_output trash mrn
        regexp {rhr\.rh_scan_date          = (.*?)NXT} $dump_output trash date
        # the year in the date field is set incorrectly:  2007->107, so just extract the last 2 digits: 
        regexp {([0-9]*)/([0-9]*)/[0-9]([0-9]*)} $date trash month day year 
        set date [format "%-2s/%-2s/%-s" $month $day $year]
        regexp {rhr\.rh_scan_time          = (.*?)NXT} $dump_output trash time 
        regexp {rhe\.ex_no                 = (.*?)NXT} $dump_output trash exam_number
        regexp {rhs\.se_desc               = (.*?)NXT} $dump_output trash se_desc
        set pfile [file tail $i]
        set line [format "%-5s | %-9s | %-18s | %-11s | %-9s |  %-10s  | %-20s" $exam_number $pfile $pname $mrn $date $time $se_desc]

        lappend raw_list $line
    } 
    
    #  write raw files to browser in order of exam number
    foreach i [lsort $raw_list] {
        .rawchooserlist insert end $i
    }

    .rawchooserlist selection set 0 0
}


##################################################
#   shows SDC selected image when OK is clicked
##################################################
proc show_image_chooser {} {
    pack forget .rawfilechooser
    .infotext delete 1.0 end
    pack forget .infotext
    .tryagainbutton configure -state disabled
    pack .imageheaderframe -in .chooserframe -anchor w -side top
    pack .infotext -in .chooserframe
    .chooserscrolly configure -command ".infotext yview"

    .okbutton configure -command show_image_info
}


##################################################
proc show_image_info {} {
    global env file_selection

    catch {set sdc_selection_file $env(SDC_SELECTION_FILE)} err
  
    set fp [open $sdc_selection_file r]
    set firstline [gets $fp]
    regexp {^([^ *]+)} $firstline trash path

    set dcmdump_output ""
    set dcmdump_fp [open "|~sdc/svk/console/bin/dcmdump $path" r]
    while {[gets $dcmdump_fp line] >= 0} {
        #puts $line
        set dcmdump_output "$dcmdump_output\n$line" 
    }

    close $fp
    close $dcmdump_fp
  
    set name ""
    set study_id ""
    set series_num ""
    set series_description ""
    set date ""

    regexp {\(0020,0010\)[\t ]SH[\t ]\[([0-9]+)\]} $dcmdump_output trash study_id 
    regexp {\(0020,0011\)[\t ]IS[\t ]\[([0-9]+)\]} $dcmdump_output trash series_num
    regexp {\(0010,0010\)[\t ]PN[\t ]\[([a-zA-Z 0-9^]+)\]} $dcmdump_output trash name
    regexp {\(0008,103e\) LO \[([a-zA-Z 0-9,\. ]+)\]} $dcmdump_output trash series_description
    regexp {\(0008,0020\) DA \[([0-9\/]+)\]} $dcmdump_output trash date

    set line [format "%-8s | %-27s | %-15s | %-5s | %-22s " $study_id $name $date $series_num $series_description ]

    .infotext insert end "You selected:\n\n$line \n"
    .directionslabel configure -text "Is this correct?"

    set file_selection $path
   
    .tryagainbutton configure -state normal
    .tryagainbutton configure -command show_image_chooser
    .okbutton configure -command show_next
}


##################################################
#   get lines from the already open socket
##################################################
proc runcommand {} {
    global files_chosen title output_file_ptr outputfilename sockChan program flag_string
    # disable run and cancel buttons
    .directionslabel configure -text "Running $title"
    # remove the flag chooser
    pack forget .optionframe .commandframe
    pack .infotext -in .chooserframe
    .infotext insert end "Click Show Output to see command output\n"
    set output_file_ptr [open "$outputfilename" w]

    set filestring [join $files_chosen " "]
  
    puts $sockChan "$program|$flag_string|$filestring" 

    flush $sockChan
    fileevent $sockChan readable read_one_line 
    .okbutton configure -state disabled
    .cancelbutton configure -state disabled
}


##################################################
#   procedure for reading one line at a time from 
#   a pipe
##################################################
proc read_one_line {} {
    global sockChan show_output output output_file_ptr
	
    set tmp [gets $sockChan]
    if {$tmp == "SIVIC_GE_DATA_BROWSER_QUIT"} {
        close $sockChan
        .infotext insert end Quit 
        .directionslabel configure -text "Click Quit to exit"
        .okbutton configure -text "Quit" -command exit
        .okbutton configure -state normal
        return 
    } 

    puts $output_file_ptr $tmp
    set output "$output$tmp\n"
    if {$show_output} {
        .infotext insert end "$tmp\n"
    }

    # scroll to the bottom after each line
    .infotext yview end 
} 


##################################################
# just in case the window gets lost, kill it after a while
proc exitAfter {} {
    global after_handle
    set after_handle [after 2700000 exit_gracefully]
}


##################################################
proc tail {path} {
    set pos [string last "/" $path]
    return [string range $path [expr $pos + 1] end]
}


##################################################
proc head {path} {
    set pos [string last "/" $path]
    return [string range $path 0 [expr $pos - 1]]
}


##################################################
proc exit_gracefully {} {
    # send a message to the sockChan "exit"
    global sockChan scanner_work_dir
    set line ""
    set trash ""
    set pid ""

    puts "EXIT GRACEFULLY....." 
    if { [file exists "$scanner_work_dir/PEER_PROCESS"] } {
        set peer_process [open "$scanner_work_dir/PEER_PROCESS" r]
        set peer_name [gets $peer_process]
        close $peer_process

        # escape quotations in $peer_name
        regsub -all {\"} $peer_name {} peer_name

        set pgrep_output [open "|ps -ef \| grep  \"$peer_name\" \| grep -v grep" r]
        set line [gets $pgrep_output]
        regexp {^[a-zA-Z]+[ \t]+([0-9]+)} $line trash pid
        close $pgrep_output

        set kill_ps	""
        set ps_output [open "| svk_ge_parse_pstree $pid "]
        while {[set line [gets $ps_output]] >= 0} {
            set kill_ps  "-p $line $kill_ps"
        }  
        set kill_ps "~sdc/svk/console/bin/svk_ge_kill_process $kill_ps"
        puts "$kill_ps"	
        eval exec $kill_ps
        close $ps_output
    }

    puts $sockChan "exit"
    flush $sockChan
    close $sockChan
    after 100
    exit
}


##################################################

# now that the whole file is parsed, call show_next 
# and start the countdown in exitafter

exitAfter

show_next

