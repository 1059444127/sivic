#!/usr/bin/perl -w

#
#   Copyright © 2009-2017 The Regents of the University of California.
#   All Rights Reserved.
# 
#   Redistribution and use in source and binary forms, with or without 
#   modification, are permitted provided that the following conditions are met:
#   •   Redistributions of source code must retain the above copyright notice, 
#       this list of conditions and the following disclaimer.
#   •   Redistributions in binary form must reproduce the above copyright notice, 
#       this list of conditions and the following disclaimer in the documentation 
#       and/or other materials provided with the distribution.
#   •   None of the names of any campus of the University of California, the name 
#       "The Regents of the University of California," or the names of any of its 
#       contributors may be used to endorse or promote products derived from this 
#       software without specific prior written permission.
#   
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
#   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#   IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
#   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
#   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
#   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
#   OF SUCH DAMAGE.
# 

#   $URL$
#   $Rev$
#   $Author$
#   $Date$
# 
#   Authors:
#       Jason C. Crane, Ph.D.
#       Beck Olson
# 


use strict;
use Cwd;
use Cwd 'abs_path';
use Getopt::Long;


my ($dir, @dir_list, @exam_list, $exam_dir, $new_exam);
my (@image_list, $image); 
my ($new_image, @series_list, $series);
my ($new_series, $new_series_dir, $image_name);

sub usage();
sub get_exam_list($);
sub get_series_number($);
sub get_image_name($$$); 

Getopt::Long::config("bundling");
GetOptions(
            "d=s" => \$dir
);

if (!$dir) {
    usage();
}

#
#   Confirm directory exists: 
#
if (! -d $dir) {
    printf("Error, No such directory: $dir\n");
    exit(1);
} 

chdir("$dir");
@exam_list = get_exam_list("$dir");

foreach $exam_dir (@exam_list) {

    #
    #   Rename scanner exam dir to Edir convention, then rename individual
    #   files.
    #
    $new_exam = "${exam_dir}";
    $new_exam =~ s/^e/E/;
    if (!rename($exam_dir, "${new_exam}")) {
        printf("Error, could not rename exam $exam_dir $new_exam\n");
        exit(1);
    } 
    
    opendir(DIR, "${new_exam}") or die "Couldn't read directory \"$new_exam\": $!\n";
    @series_list = readdir(DIR);
    close(DIR);
    
    foreach $series (@series_list) {
    
        if ($series =~ m/^s/) {
    
            $new_series = get_series_number("${new_exam}/${series}");
            $new_series_dir =  "${new_exam}/${new_series}";
            print "rename ${new_exam}/${series} -> ${new_series_dir}\n"; 
            if (!rename("${new_exam}/${series}", "${new_series_dir}")) {
                printf("Error, could not rename series: ${new_exam}/${series} to ${new_series_dir}\n");
                exit(1);
            }
    
            opendir(DIR, "${new_series_dir}") 
                or die "Couldn't read directory \"$new_series_dir\": $!\n";
            @image_list = readdir(DIR);
            close(DIR);
    
            foreach $image (@image_list) {
                if (! -d "${new_series_dir}/${image}") {
                    $image_name = get_image_name($new_exam, $new_series, $image); 
                    if ("$image_name" eq "1") {
                        printf("Error, could not get image name: ${image}\n");
                        exit(1);
                    }
                    if (!rename("${new_series_dir}/${image}", "${new_series_dir}/${new_image}")) {
                        printf("Error, could not rename image: ${image}\n");
                        exit(1);
                    }
                }
            }
    
        }
    }
}
    

#
#   get a list of all e# sub-dirs in specified directory.
#
sub get_exam_list($) {

    my (@dir_list, @exam_list, $file);
    my ($dir) = @_;

    opendir(DIR, $dir) or die "Couldn't read directory \"$dir\": $!\n";
    @dir_list = readdir(DIR);
    close(DIR);

    #
    #   get exam dir list:
    #
    foreach $file (@dir_list) {
        if (-d $file) {
            if ($file =~ m/^e\d+/) {
                push(@exam_list, "$file");
            }
        }
    }
    return @exam_list; 
}


#
#   Extract the dcm series from the first image
#
sub get_series_number($) {        

    my ($series_number, $dcmdump);
    my ($series_dir) = @_;


    #   determine which path to dcmdump to use.  If on console, then use full path
    my $series_cmd    = "dcmdump +P 0020,0011 ${series_dir}\/*.1 ";
    $dcmdump = "$ENV{HOME}/svk/console/bin/dcmdump";
    my $dictpath = "$ENV{HOME}/svk/console/lib/dicom.dic";
    if ( -f $dcmdump && -f $dictpath ) {
        $series_cmd    = "export DCMDICTPATH=$dictpath; $dcmdump +P 0020,0011 ${series_dir}\/*.1 ";
        print "On Scanner, using $dcmdump \n";  
    }
    print "$series_cmd\n"; 
    $series_number = `$series_cmd `; 
    $series_number =~ s/.*\[(\d+)\].*/$1/;
    chomp $series_number;

    return $series_number;
}


#
#   Create new image name with E#S#I#.DCM name convention. 
#   return 1 if can't create name.
#
sub get_image_name($$$) {

    my ($image_number);
    my ($new_exam, $new_series, $image) = @_;
    if ($image =~ m/.*\.(\d+)$/) {
        $image_number = $1;
        $new_image = "${new_exam}S${new_series}I${image_number}.DCM";
    } else {
        $new_image = 1;;
    }
    return $new_image;
}



sub usage() {

    print << "EndofUsage";


    svk_ge_rename_scanner_dcm_files -d dir

        -d  top level dir containing one or more dicom e#### directories from scanner.  All DCM files
            will be renamed to the convention E#S#I#.DCM.

EndofUsage

exit 1;
}



